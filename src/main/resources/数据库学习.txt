//table 的作用
//1. 表结构定义
//
//定义数据库表的名称："ubitems"
//定义表的列结构：id, player, item
//指定每列的数据类型
//
//2. 数据库操作接口
//kotlin// 插入数据
//table.insert(dataSource, "player", "item") { ... }
//
//// 查询数据
//table.select(dataSource) { ... }
//
//// 更新数据
//table.update(dataSource) { ... }
//
//// 删除数据
//table.delete(dataSource) { ... }
//
//// 创建表
//table.createTable(dataSource)
//table 对象的组成
//kotlinTable("表名", 数据库连接配置) {
//    // 列定义
//    add { id() }           // 自增主键列
//    add("列名") {           // 普通列
//        type(数据类型)
//    }
//}
//实际对应关系
//你的 table 对象对应数据库中的这张表：
//列名类型说明idINTEGER自增主键playerTEXT玩家名称itemTEXTBase64编码的物品数据
//简单比喻
//可以把 table 理解为：
//
//Excel表格的模板：定义了有哪些列
//操作工具：提供增删改查的方法
//桥梁：连接Kotlin代码和SQLite数据库
//
//所以 table = 表结构 + 操作方法 的组合对象。




///dataSource 是数据库连接池/数据源对象，让我详细解释：
//dataSource 的定义
//在你的代码中：
//kotlinval host = newFile(getDataFolder(), "ubitems.db").getHost()
//private val dataSource by lazy { host.createDataSource() }
//dataSource 的作用
//1. 数据库连接管理
//
//管理与SQLite数据库文件的连接
//提供数据库连接池功能
//自动处理连接的创建和关闭
//
//2. 执行SQL操作的桥梁
//kotlin// 所有数据库操作都需要 dataSource
//table.insert(dataSource, ...) { ... }
//table.select(dataSource) { ... }
//table.update(dataSource) { ... }
//table.delete(dataSource) { ... }
//dataSource 的工作流程
//kotlindataSource.connection.use { connection ->
//    // 使用数据库连接执行SQL
//    // connection 是实际的数据库连接
//}
//简单比喻
//可以把 dataSource 理解为：
//🏠 房子钥匙
//
//host = 房子地址（数据库文件路径）
//dataSource = 钥匙（用来打开数据库）
//table = 房间里的家具（表结构和操作方法）
//
//🚗 汽车引擎
//
//host = 汽车配置
//dataSource = 引擎（提供动力连接数据库）
//table = 方向盘/操作界面（执行具体操作）
//
//为什么需要 dataSource？
//kotlin// ❌ 不能直接这样操作
//table.insert("player", "item") { ... }
//
//// ✅ 必须通过 dataSource
//table.insert(dataSource, "player", "item") { ... }
//因为：
//
//安全性：管理连接，防止连接泄露
//效率：连接池复用连接，提高性能
//稳定性：自动处理连接异常和重连
//
//总结
//dataSource = 数据库连接的管理器，是代码操作数据库的必需桥梁。



//this.elements 在delete块中表示：
//删除表中的所有元素/记录
//相当于SQL的 DELETE FROM table_name
//清空整个表的数据


MutableMap<Int, ItemStack> = mutableMapOf() 是Kotlin中的可变映射表初始化，让我详细解释：
类型分解
MutableMap<Int, ItemStack>

MutableMap：可变的映射表（字典/哈希表）
Int：键的类型（槽位编号）
ItemStack：值的类型（物品对象）

= mutableMapOf()

默认值：创建一个空的可变映射表
如果不传参数，就是空的映射表

实际含义
这相当于创建一个槽位→物品的对应关系表：
kotlin// 例子：
val data = mutableMapOf<Int, ItemStack>()
data[0] = ItemStack(Material.DIAMOND_SWORD)  // 第0格放钻石剑
data[1] = ItemStack(Material.BREAD)          // 第1格放面包
data[5] = ItemStack(Material.IRON_PICKAXE)   // 第5格放铁镐